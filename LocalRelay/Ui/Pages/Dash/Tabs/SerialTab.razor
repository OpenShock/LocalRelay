@using System.Reactive.Linq
@using System.Reactive.Subjects
@using OpenShock.LocalRelay.Backend
@using OpenShock.LocalRelay.Services
@inject SerialService SerialService
@inject FlowManager FlowManager
@implements IDisposable

@page "/dash/serial"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">

    <MudButton OnClick="RefreshSerialPorts" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Style="margin-right: 10px;">Refresh Serial Ports</MudButton>
    <MudSelect Variant="Variant.Outlined" @bind-Value="_selectedSerialPort" Label="Serial Port" @bind-Value:after="SelectedSerialPortChanged">
        @foreach (var port in _serialPorts)
        {
            <MudSelectItem Value="@port">@port</MudSelectItem>
        }
    </MudSelect>

    <br/>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column; height: 500px" @onkeydown="InputKey">

        <h2>Serial Terminal</h2>

        <div style="flex-grow: 1; overflow-y: auto; display: flex; flex-direction: column-reverse; height: 100%">

            <pre>
                @if (FlowManager.SerialPortClient?.RxConsoleBuffer == null)
                {
                    <span>Serial Port is not connected</span>
                }
                else
                {
                    @foreach (var line in FlowManager.SerialPortClient.RxConsoleBuffer)
                    {
                        @line
                    }
                }
            </pre>
        </div>
        
        <MudTextField Style="height: 0; width: 0;" @ref="_bogus" T="string"></MudTextField>
        
        <MudTextField
            @ref="_terminalInputField" @bind-Value="@_terminalInput" Immediate="true"/>
    </MudPaper>

</MudPaper>

@code {
    private string? _selectedSerialPort;
    private string[] _serialPorts = [];
    private string _terminalInput = string.Empty;
    
    private MudTextField<string> _terminalInputField = null!;
    private MudTextField<string> _bogus = null!;
    

    protected override void OnInitialized()
    {
        RefreshSerialPorts();
        FlowManager.OnConsoleUpdate += FlowManagerOnOnConsoleUpdate;
    }

    private Task FlowManagerOnOnConsoleUpdate()
    {
        return InvokeAsync(StateHasChanged);
    }

    private void RefreshSerialPorts()
    {
        _serialPorts = SerialService.GetSerialPorts();
    }

    private async Task SelectedSerialPortChanged()
    {
        if (_selectedSerialPort != null)
            await FlowManager.ConnectSerialPort(_selectedSerialPort);
    }

    private async Task InputKey(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter")) return;
        
        FlowManager.SerialPortClient?.QueueCommand(_terminalInput + "\r\n");
        _terminalInput = string.Empty;
        await _terminalInputField.Clear();
        await _bogus.InputReference.ElementReference.FocusAsync();
        await _terminalInputField.InputReference.ElementReference.FocusAsync();
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        FlowManager.OnConsoleUpdate -= FlowManagerOnOnConsoleUpdate;
    }

}