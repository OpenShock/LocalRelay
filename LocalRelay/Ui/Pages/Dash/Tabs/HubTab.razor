@inject ILogger<SerialTab> Logger
@using Microsoft.Extensions.Logging
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using OpenShock.LocalRelay.Services
@using OpenShock.SDK.CSharp.Live.LiveControlModels
@implements IAsyncDisposable

@page "/dash/hub"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">

    <span>
    
    <MudSelect T="string" Variant="Variant.Outlined" Label="Hub" @bind-Value="_selectedDevice" @bind-Value:after="SelectedDeviceChanged">
        @foreach (var device in OpenShockService.Data.Hubs.Value)
        {
            <MudSelectItem Value="@device.Id.ToString()">@device.Name</MudSelectItem>
        }
    </MudSelect>

    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Style="margin-right: 10px;">Disconnect</MudButton>
    </span>
    <div>
        <MudIcon Color="GetConnectionStateColor(FlowManager.State.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
        @FlowManager.State.Value
    </div>

</MudPaper>

@code {

    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    
    private string _selectedDevice = string.Empty;
    private IAsyncDisposable _flowUpdatedSubscription = null!;

    protected override async Task OnInitializedAsync()
    {
        _selectedDevice = FlowManager.Id != Guid.Empty ? FlowManager.Id.ToString() : string.Empty;

        _flowUpdatedSubscription = await FlowManager.State.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
    }

    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Reconnecting => Color.Warning,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.Disconnected => Color.Error,
            _ => Color.Error
        };

    private async Task SelectedDeviceChanged()
    {
        if (string.IsNullOrEmpty(_selectedDevice)) return;


        if (!Guid.TryParse(_selectedDevice, out var guid))
        {
            Logger.LogError("Failed to parse device guid");
            return;
        }

        await FlowManager.SelectedDeviceChanged(guid);
    }

    public async ValueTask DisposeAsync()
    {
        await _flowUpdatedSubscription.DisposeAsync();
    }

}